name: Deploy FastAPI app to EKS
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install kubectl
      uses: azure/setup-kubectl@v2.0
      with:
        version: 'v1.24.0' # default is latest stable
      id: install

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-2

    - name: Get ECR registry
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      with:
        mark-password: 'false'

    - name: Build, tag, and push docker image to Amazon ECR
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY: testdeploy
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $REGISTRY/testdeploy:$IMAGE_TAG -f service1/Dockerfile service1
        docker push $REGISTRY/testdeploy:$IMAGE_TAG
        docker push 590184058011.dkr.ecr.ap-southeast-2.amazonaws.com/testdeploy:production

    - name: Check if cluster exists
      id: check-cluster
      run: |
        if aws eks describe-cluster --name service1 >/dev/null 2>&1; then
          echo "cluster-exists=0" >> $GITHUB_ENV
        else
          echo "cluster-exists=1" >> $GITHUB_ENV
        fi

    - name: Create cluster if it does not exist.
      if: env.cluster-exists == '1'
      run: |
        echo "Cluster does not exist."
        ARCH=amd64
        PLATFORM=$(uname -s)_$ARCH
        curl -sLO "https://github.com/eksctl-io/eksctl/releases/latest/download/eksctl_$PLATFORM.tar.gz"
        tar -xzf eksctl_$PLATFORM.tar.gz -C /tmp && rm eksctl_$PLATFORM.tar.gz
        sudo mv /tmp/eksctl /usr/local/bin
        eksctl create cluster --name service1 --region ap-southeast-2 --nodegroup-name linux-nodes --node-type t2.micro --nodes 2

    - name: Update kube config
      run: aws eks update-kubeconfig --name service1
    
    - name: Deploy to EKS
      env:
        IMAGE_NAME: ${{ github.sha }}
      
      run: |
        kubectl apply -f deployment.yml
        kubectl apply -f service.yml
        